name: CI/CD - Rate Movies API

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PYTHON_VERSION: "3.12"
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}:latest
  DJANGO_SETTINGS_MODULE: config.settings.base

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tmdb_api
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d tmdb_api"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Run code linting (ruff)
        run: |
          pip install ruff
          ruff check .

      - name: Run unit tests
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tmdb_api
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          DEBUG: true
        run: |
          pytest -v --disable-warnings --maxfail=1

  build-and-deploy:
    name: Build and Deploy
    needs: lint-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE }} .

      - name: Push Docker image
        run: docker push ${{ env.DOCKER_IMAGE }}

      - name: Deploy to Render
        if: success()
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          curl -X POST "$RENDER_DEPLOY_HOOK"
